--SET hive.execution.engine=mr;
set mapreduce.map.memory.mb=4096;
set mapreduce.reduce.memory.mb=4096;
set mapreduce.map.java.opts=-Xmx3072m -XX:-UseGCOverheadLimit;
set mapreduce.reduce.java.opts=-Xmx3072m -XX:-UseGCOverheadLimit;
set mapreduce.reduce.shuffle.memory.limit.percent=0.1;


add jar s3n://musically-bigdata/recommend_script/udf/log/recommend-offline-0.1.jar;
create temporary function regexp_count as 'net.vickymedia.recommend.udf.util.RegexpCount';
create temporary function split_part as 'net.vickymedia.recommend.udf.util.SplitPart';
create temporary function trans_array as 'net.vickymedia.recommend.udf.util.TransArray';

--create EXTERNAL table if not exists map_sample_users
--(
--   user_id   bigint
--   , fans_len	bigint
--)
--partitioned by(dt string)
--ROW FORMAT DELIMITED
--FIELDS TERMINATED BY '\t'
--STORED AS TEXTFILE
--location 's3n://musically-bigdata/recommend_script/report/map_sample_users/'
--TBLPROPERTIES (
--    'auto.purge' = 'false'
--);
--
--insert overwrite table map_sample_users partition(dt=${hiveconf:day})
--select
--    item_id
--    , item_len
--from
--uid_to_norm
--order by rand()
--limit 1000000
--;

select
    sum(H.map_score)/count(*)
from
(
select
    E.from_id
    , E.precision*1.0/G.recall as map_score
from
(
select
    from_id
    , sum(fenzi*1.0/fenmu) precision
from
(
select
    A.from_id
    , A.to_id
    , B.user_id_sim as rec_id
    , B.rank as fenmu
    , Row_Number() over(partition by A.from_id, A.to_id order by B.rank) as fenzi
from
(
--follow relationship one month ago
select
    a.*
from
(
select * from
user_follow_dev
where mutual=0
) a
join
(
select
    user_id
    , fans_len
from
map_sample_users
--where dt=${hiveconf:day}
where dt=20170630
) b
on (a.from_id=b.user_id)
) A
join
(
--similar user which is sorted by score
select
user_id
, user_id_sim
, Row_Number() over(partition by user_id order by score desc) as rank
from
(
select
    user_id
    , split_part(user_info, ',', 1) as user_id_sim
    , cast(split_part(user_info, ',', 2) as float) as score
from
(
select
    trans_array(1, '\\;', item_id, item_list) as (user_id, user_info)
from
${hiveconf:table}
where dt=${hiveconf:day}
) a
) b
) B
on (A.to_id=B.user_id)
join
(
--new follow
select
    a.from_id
    , a.to_id
    , 1 as hit
from
(
select * from
user_follow_ab_test
where mutual=0
) a
left outer join
(
select * from
user_follow_dev
where mutual>=0
) b
on (a.from_id=b.from_id and a.to_id=b.to_id)
where b.mutual is null
) C
on (A.from_id=C.from_id and B.user_id_sim=C.to_id)
) D
group by from_id
) E
join
(
select
    from_id
    , count(*) as recall
from
(
select
    a.from_id
    , a.to_id
from
(
select * from
user_follow_ab_test
where mutual=0
) a
left outer join
(
select * from
user_follow_dev
where mutual>=0
) b
on (a.from_id=b.from_id and a.to_id=b.to_id)
where b.mutual is null
) F
group by from_id
) G
on (E.from_id=G.from_id)
) H
left outer join
(
select
    user_id
from
disabled_users
where dt=20170729
) I
on (H.from_id=I.user_id)
where I.user_id is null
;

--SET hive.execution.engine=mr;
set mapreduce.map.memory.mb=3072;
set mapreduce.reduce.memory.mb=3072;
set mapreduce.map.java.opts=-Xmx3072m -XX:-UseGCOverheadLimit;
set mapreduce.reduce.java.opts=-Xmx3072m -XX:-UseGCOverheadLimit;


add jar s3n://musically-bigdata/recommend_script/udf/log/recommend-offline-0.1.jar;
create temporary function regexp_count as 'net.vickymedia.recommend.udf.util.RegexpCount';
create temporary function split_part as 'net.vickymedia.recommend.udf.util.SplitPart';
create temporary function trans_array as 'net.vickymedia.recommend.udf.util.TransArray';


select
    sum(hit_nums*1.0/rec_nums)/count(*) as precision
    , sum(hit_nums*1.0/recall)/count(*) as recall
from
(
select
    E.from_id
    , E.rec_nums
    , E.hit_nums
    , F.recall
from
(
select
    C.from_id
    , count(*) as rec_nums
    , sum(if(D.hit is null, 0, 1)) as hit_nums
from
(
select
    A.from_id
    , B.user_id_sim as rec_id
    , Row_Number() over(partition by A.from_id, B.user_id_sim order by rand()) as rank
from
(
--follow relationship one month ago
select
    a.*
from
(
select * from
user_follow_dev
where mutual=0
) a
join
(
select
    user_id
    , fans_len
from
map_sample_users
--where dt=${hiveconf:day}
where dt=20170630
) b
on (a.from_id=b.user_id)
) A
join
(
--similar user which is sorted by score
select
user_id
, user_id_sim
, Row_Number() over(partition by user_id order by score desc) as rank
from
(
select
    user_id
    , split_part(user_info, ',', 1) as user_id_sim
    , cast(split_part(user_info, ',', 2) as float) as score
from
(
select
    trans_array(1, '\\;', item_id, item_list) as (user_id, user_info)
from
${hiveconf:table}
where dt=${hiveconf:day}
) a
) b
) B
on (A.to_id=B.user_id)
) C
left outer join
(
--new follow
select
    a.from_id
    , a.to_id
    , 1 as hit
from
(
select * from
user_follow_ab_test
where mutual=0
) a
left outer join
(
select * from
user_follow_dev
where mutual>=0
) b
on (a.from_id=b.from_id and a.to_id=b.to_id)
where b.mutual is null
) D
on (C.from_id=D.from_id and C.rec_id=D.to_id)
where C.rank=1
group by C.from_id
) E
join
(
select
    from_id
    , count(*) as recall
from
(
select
    a.from_id
    , a.to_id
from
(
select * from
user_follow_ab_test
where mutual=0
) a
left outer join
(
select * from
user_follow_dev
where mutual>=0
) b
on (a.from_id=b.from_id and a.to_id=b.to_id)
where b.mutual is null
) c
group by from_id
) F
on (E.from_id=F.from_id)
left outer join
(
select
    user_id
from
disabled_users
where dt=20170729
) G
on (E.from_id=G.user_id)
where G.user_id is null
) H
;

add jar s3n://musically-bigdata/spark-jars/aws-jsonserde.jar;
add jar s3n://musically-bigdata/spark-jars/hive-contrib-1.2.1.jar;
add jar s3n://musically-bigdata/spark-jars/json-serde-1.3-jar-with-dependencies.jar;

CREATE EXTERNAL TABLE IF NOT EXISTS t_user_feature (
   u_id  string,
   featured_scope  string,
   featured_time   string
)
PARTITIONED BY (dt string)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
WITH SERDEPROPERTIES (
  "ignore.malformed.json" = "true"
)
STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat'
OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
location 's3://musically-bigdata/mining_script/meta/t_user_feature/combined/'
TBLPROPERTIES (
    'hive.input.dir.recursive' = 'TRUE',
    'hive.mapred.supports.subdirectories' = 'TRUE',
    'hive.supports.subdirectories' = 'TRUE',
    'mapred.input.dir.recursive' = 'TRUE',
    'mapreduce.input.fileinputformat.input.dir.recursive' = 'TRUE'
);

alter table musical add if not exists partition(dt=${hiveconf:day});
alter table t_label_rel_all add if not exists partition(dt=${hiveconf:day});
alter table t_user_feature add if not exists partition(dt=${hiveconf:day});

create EXTERNAL table if not exists handle_name_fake_account_filter
(
    user_id             bigint
    , user_handle       string
    , user_nick         string
    , user_fans         bigint
    , feature_mus	string
    , user_level	string
    , crown		string
    , star_user_id      bigint
    , star_handle       string
    , match_result      string
    , handle_like       string
    , nick_like         string
    , star_handle_len   bigint
    , handle_rate       float
    , nick_rate         float
    , feature_count	bigint
    , feature_list	string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '\t'
STORED AS TEXTFILE
location 's3n://musically-bigdata/recommend_script/data/fake_account/handle_name_fake_account_filter/'
TBLPROPERTIES (
        'auto.purge' = 'false'
);

insert overwrite table handle_name_fake_account_filter
select
    a.user_id
    , user_handle
    , user_nick
    , user_fans
    , b.feature
    , c.name
    , d.crown
    , star_user_id
    , star_handle
    , match_result
    , handle_like
    , nick_like
    , star_handle_len
    , handle_rate
    , nick_rate
    , feature_count
    , feature_list
from
(
select
    user_id
    , user_handle
    , user_nick
    , user_fans
    , star_user_id
    , star_handle
    , match_result
    , handle_like
    , nick_like
    , star_handle_len
    , handle_rate
    , nick_rate
from
handle_name_fake_account
where user_fans>=100
) a
left join
(
select
    user_id
    , 'feature' as feature
    , count(musical_id) as feature_count
    , concat_ws(',', collect_set(cast(musical_id as string))) feature_list
from
musical
where dt=${hiveconf:day}
and promote_type>0
group by user_id
) b
on (a.user_id = b.user_id)
left join
(
select
    user_id
    , name
from
t_label_rel_all
where dt=${hiveconf:day}
and name in ('creator whitelist', 'creators', 'premium creator')
) c
on (a.user_id = c.user_id)
left join
(
select
    u_id as user_id
    , 'crown' as crown
from
t_user_feature
where dt=${hiveconf:day}
) d
on (a.user_id = d.user_id)
where b.user_id is null and c.user_id is null and d.user_id is null
order by user_fans desc
;
